library(pepStat)
library(PEP.db)
mapping.file = "~/Dropbox/RV144 Tomaras/tomaras_mapping.csv"
gprPath = "~/Dropbox/RV144 Tomaras/Tomaras"
pSet = makePeptideSet(path = gprPath, mapping.file = mapping.file)
data(pep_hxb2)
plotArrayImage(pSet, 5:6, low = "white", high = "red")
psSet = summarizePeptides(pSet, position = pep_hxb2)
psSet
rownames(exprs(psSet))
all(rownames(exprs(psSet)) == values(ranges(psSet))[[1]][["names"]])
plotArrayResiduals(pSet, 4:5, smooth = FALSE)
plotArrayImage(pSet, 5:6, low = "white", high = "red")
sampleNames(pSet)[5:6]
plot.lm
?dev.flush
library(fields)
library(plyr)
plotArrayImage(pSet, 5:6, low = "white", high = "red")
plotArrayImage(pSet, 5:6, low = "white", high = "red")
?flush.console
plotArrayImage(pSet, 5:6, low = "white", high = "red")
simple <- function()
{
par(ask = TRUE)
for(i in 1:2)
{
plot(rnorm(10))
}
par(ask = FALSE)
}
simple()
simple()
simple <- function()
{
par(ask = TRUE)
for(i in 1:2)
{
dev.hold()
plot(rnorm(10))
dev.flush()
}
par(ask = FALSE)
}
simple()
par("ask")
plot.lm
par(ask = TRUE)
plotArrayImage(pSet, 5:6, low = "white", high = "red")
par(ask = FALSE)
plotArrayImage(pSet, 5:6, low = "white", high = "red")
plotArrayImage(pSet, 5:6, low = "white", high = "red")
remove.packages("pepStat")
library(pepStat)
library(PEP.db)
library(fields)
library(plyr)
mapping.file = "~/Dropbox/RV144 Tomaras/tomaras_mapping.csv"
gprPath = "~/Dropbox/RV144 Tomaras/Tomaras"
pSet = makePeptideSet(path = gprPath, mapping.file = mapping.file)
plotArrayImage(pSet, 5:6, low = "white", high = "red")
c
?dev.interactive()
remove.packages("pepStat")
library(pepStat)
unload(pepSat)
unload.packages(pepStat)
help.search("unload")
library(PEP.db)
mapping.file = "~/Dropbox/RV144 Tomaras/tomaras_mapping.csv"
gprPath = "~/Dropbox/RV144 Tomaras/Tomaras"
pSet = makePeptideSet(path = gprPath, mapping.file = mapping.file)
plotArrayImage(pSet, 5:6, low = "white", high = "red")
?system.file
system.file()
system.file(package = "pepStat")
mapFile <- system.file("extdata/mapping.csv", package = "pepStat")
mapFile
D <- read.csv("mapFile")
D <- read.csv(mapFile)
D
remove.packages("pepStat")
library(pepStat)
mapFile <- system.file("extdata/mapping.csv", package = "pepStat")
map <- read.csv(mapFile)
map
dirToParse <- system.file("extdata/RVV", package = "pepStat")
list.files(dirToParse)
mapFile <- system.file("extdata/mapping.csv", package = "pepStat")
map <- read.csv(mapFile)
map
dirToParse <- system.file("extdata/RVV", package = "pepStat")
list.files(dirToParse)
pSet <- makePeptideSet(files=NULL, path=dirToParse, mapping.file=mapFile,
log=TRUE)
values(ranges(pSet))
head(values(ranges(pSet)))
head(values(ranges(pSet))[[1]])
exprs(pSet)[1:5,1:4]
?makePeptideSet
head(ranges(ranges(pSet))[[1]])
peptide(pSet)
head(peptide(pSet))
head(featureID(pSet))
head(values(ranges(pSet))[[1]])
preproc(pSet)
pData(pSet)
pnSet <- NormalizeArray(psSet)
library(PEP.db)
data(pep_hxb2)
psSet <- summarizePeptides(pSet, summary = "mean", position = pep_hxb2)
pnSet <- NormalizeArray(psSet)
psmSet <- slidingMean(pnSet, width = 9)
V_calls <- makeCalls(psmSet, freq = FALSE, cutoff = .1, method = "FDR",
verbose = TRUE)
V_calls <- makeCalls(psmSet, freq = TRUE, group = "treatment",
cutoff = .1, method = "FDR", verbose = TRUE)
head(V_calls)
plot(position(psSet), V_calls[,2])
plot(position(psSet), V_calls[,1])
remove.packages("pepStat")
?install.packages
install.packages("~/git/pepStat_0.99.6.tar.gz")
vignette(pepStat)
library(pepStat)
vignette("pepStat")
remove.packages("pepStat")
q()
