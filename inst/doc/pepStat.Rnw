%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{The pepStat users guide}
%\VignetteDepends{PEP.db, knitr}
%\VignetteKeywords{Preprocessing, Affymetrix}
%\VignettePackage{pepStat}
\documentclass[11pt]{article}
\usepackage{hyperref}
\usepackage{url}
\usepackage{fullpage}
\usepackage{graphicx}

<<include=FALSE>>=
library(knitr)
opts_chunk$set(tidy=TRUE)
@


\begin{document}
\title{The pepStat user guide}
\author{Raphael Gottardo\footnote{rgottard@fhcrc.org}, Greg Imholte\footnote{gimholte@uw.edu}, Mike Jiang\footnote{wjiang2@fhcrc.org} and Renan Sauteraud\footnote{rsautera@fhcrc.org}}

\maketitle


\textnormal {\normalfont}
A step-by-step guide in the analysis of peptide microarray antibody binding

\tableofcontents

\newpage
\section{Introduction}
The \texttt{pepStat} package offers a complete analytical framework for 
the analysis of peptide microarray data. It includes a novel normalizatio
n method to remove non-specific peptide binding activity of antibodies, a 
data smoothing reducing step to reduce background noise, and subject
-specific positivity calls. 

%\subsection{Citing} %If/when it gets accepted
%If you use this package for a publication, we would ask you to cite the following:
%
%\begin{quote}
%Greg C. Imholte, Renan Sauteraud, Bette Korber, Robert T. Bailer, Ellen T. Turk3, Georgia Tomaras, Shauna Shen, John Mascola, Richard Koup, David Montefiori, and  Raphael Gottardo (2013).
%\textbf{A computational framework for the analysis of peptide microarray antibody binding data with application to HIV vaccine profiling.}
%\end{quote}
\subsection{Installing the package}
The \texttt{pepStat} package requires GSL, an open source scientific 
computing library. This library is freely available at \url{http://www
.gnu.org/software/gsl/}.

\subsection{Loading the package}
As with any R package, it should first be loaded in the session.
<<loading-pakage>>=
library(pepStat)
@

\section{Generating a peptideSet}
\subsection{Reading in \texttt{.gpr} files}
The reading function takes a path as its argument and parses all the 
\textit{.gpr} files in the given directory. Alternatively, one may 
specify a character vector of paths to individual 
\textit{.gpr} files.

Optionally, one may provide a path to a \textit{mapping file} giving 
annotation data for each slide, such as treatment status or patient 
information. If provided, the data set \textbf{must} be a \texttt{.csv}
file and \textbf{must} include columns labeled \texttt{filename}, 
\texttt{ptid}, and \texttt{visit}. Elements in column \texttt{filename}
must correspond to the filenames of slides to be read in, without the
\texttt{.gpr} extension. Column \texttt{ptid} is a subject or slide
identifier. Column \texttt{visit} indicates a case or control condition,
such as pre/post vaccination, pre/post infection, or healthy/infected
status. Control conditions must be labelled \textit{pre}, while
case conditions must be labelled \textit{post}. Alternatively, one may 
input a \texttt{data.frame} satisfying the same requirements.

By default channels F635 Median and B635 Median are collected, and
the \texttt{'normexp'} method of the \texttt{backgroundCorrect} function 
in the \texttt{limma} package corrects probe intensities for background 
fluorescence. Other methods may be selected, see documentation.

<<makePepideSet>>=
mapFile <- system.file("extdata/mapping.csv", package = "pepStat")
map <- read.csv(mapFile)
map
dirToParse <- system.file("extdata/RVV", package = "pepStat")
list.files(dirToParse)
pSet <- makePeptideSet(files=NULL, path=dirToParse, mapping.file=mapFile,
                       log=TRUE)
@

\subsection{Visualize slides}
We include two plotting functions to detect possible spatial slide artifacts.

\setkeys{Gin}{width=\textwidth}
<<plot-slide, include=TRUE, fig.width=7.48, fig.height=3>>=
plotArrayImage(pSet, array.index = 1)
@

<<plot-residuals, include=TRUE, fig.width=7.48, fig.height=3>>=
plotArrayResiduals(pSet, array.index = 1, smooth = TRUE)
@

\subsection{Accessing \texttt{peptideSet} elements}
\texttt{makePeptideSet} returns an object of class \texttt{peptideSet}, 
the base structure used in \texttt{pepStat}. It contains the sequence and 
ID of the peptides, measured intensities, annotations added through a 
mapping file, and probe slide position information. Various accessor 
functions can extract these values.

<<accessors>>=
# peptide intensities
exprs(pSet)[1:5,1:4]
# probe information
head(values(ranges(pSet))[[1]])
# same as "peptide" and "featureID" columns above
head(peptide(pSet), 4)
head(featureID(pSet), 4)
# mapping file slide annotations
head(pData(pSet))
@

\texttt{preproc(pSet)} stores additional information such as slide
layout, background correction methods, normalization, transformation, etc
.

\subsection{Summarizing within-slide replicates}
The function \texttt{summarizePeptides} summarizes within-slide 
replicates by either their mean or median. Additional peptide sequence 
and/or annotation information may be incorporated with a 
\texttt{RangedData} object from the \texttt{IRanges} package. In this 
example, we use pep\_hxb2 available in the \texttt{PEP.db} package.

<<adding-positions>>=
library(PEP.db)
data(pep_hxb2)
psSet <- summarizePeptides(pSet, summary = "mean", position = pep_hxb2)
@

pep\_hxb2 gives information regarding the position of each peptide, their 
z-scores, the clades they belong to and the alignment with the reference 
sequence HXB2.

\section{Normalizing the peptideSet}
The primary goal of the data normalization step is to remove 
non-biological source of bias and increase the comparability of true 
positive signal intensities across slides. The method developped for this 
package uses physiochemical properties of individual peptides to model 
non-specific antibody binding to arrays.

<<normalize>>=
pnSet <- normalizeArray(psSet)
@

An object of class \texttt{peptideSet} containing the corrected peptides intensities is returned.

\section{Data smoothing}
The optional data smoothing step takes advantage of the overlapping 
nature of the peptides on the array to remove background noise caused by 
experimental variation. It is likely that two overlapping peptides will 
share common binding signal, when present. \texttt{pepStat} use a sliding 
mean technique technique to borrow strength across neighboring peptides 
and to reduce signal variability. This statistic increases detection of 
binding \textit{hotspots} that noisy signals might otherwise obscure. 
Peptides are smoothed according to their sequence alignment position, 
taken from \texttt{position(psSet)}.
<<data-smoothing>>=
psmSet <- slidingMean(pnSet, width = 9)
@

\section{Making calls}
The final step is to make the positivity calls. The function 
\texttt{makeCalls} automatically uses information provided in the mapping
file, accessed via \texttt{pData(pSet)}. It detects whether samples
are paired or not. If samples are paired, POST intensities are subtracted
from PRE intensities, then thresholded. Otherwise, PRE samples are 
averaged, and then subtracted from POST intensities. These corrected
POST intensities are thresholded.

The \texttt{freq} argument controls whether we return the percentage
of responders against each peptide, or a matrix of subject specific call
. When \texttt{freq} is \texttt{TRUE}, we may supply a \texttt{group} 
variable from \texttt{pData(psmSet)} on which we split the frequency 
calculation.

<<makeCalls>>=
V_calls <- makeCalls(psmSet, freq = TRUE, group = "treatment", 
                     cutoff = .1, method = "FDR", verbose = TRUE)
@

<<session>>=
sessionInfo()
@

\end{document}
