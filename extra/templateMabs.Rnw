
<<Load-all-necessary-packages,cache=FALSE>>=
# Here I assume that all the objects are store in a proper database
library(xtable)
library(pepStat)
library(pepViz)
library(HIV.db)
data(pep_hxb2)
library(lattice)
library(RColorBrewer)
library(reshape2)
library(imputation)
@

<<set-general-options,cache=FALSE>>=
sizeAnno<-2
sizeTrack<-8
trackGapAnno<-.5
colorAnno<-brewer.pal(9, "Pastel1")
colorTrack<-brewer.pal(8, "Set2")
@

<<DataDB,cache=TRUE>>=
## Read mapping file
mapping<-paste(path,"mapping.csv",sep="")
mapping.control<-paste(pathControl,"mapping.csv",sep="")

## Raw data (no background subtraction)
pSetRaw<-makePeptideSet(files=NULL,path=pathData,mapping.file=mapping,log=TRUE,bgCorrect.method="none",norm.empty=FALSE)
pSetRawCont<-makePeptideSet(files=NULL,path=pathControlData,mapping.file=mapping.control,log=TRUE,bgCorrect.method="none",norm.empty=FALSE)
## Read mapping file
psSetRaw<-summarizePeptides(pSetRaw,summary="median",position=pep_hxb2)
psSetRawCont<-summarizePeptides(pSetRawCont,summary="median",position=pep_hxb2)
psSetRaw<-cbind(psSetRaw,psSetRawCont)

## All analysis
pSet<-makePeptideSet(files=NULL,path=pathData,mapping.file=mapping,log=TRUE,norm.empty=TRUE,bgCorrect.method="half")
psSet<-summarizePeptides(pSet,summary="median",position=pep_hxb2)
pSetCont<-makePeptideSet(files=NULL,path=pathControlData,mapping.file=mapping.control,log=TRUE,norm.empty=TRUE,bgCorrect.method="half")
psSetCont<-summarizePeptides(pSetCont,summary="median",position=pep_hxb2)
psSet<-cbind(psSet,psSetCont)
pnSet<-NormalizeArray(psSet, robust=TRUE, standard=FALSE, method="Zpep")
pnmSet<-slidingMean(pnSet, width=width)
## Clade specific frequencies and calls
pnSet.clade<-split(pnSet,clade(pnSet))
## I break it down by control clade
pnmSet.clade<-lapply(pnSet.clade,slidingMean,width=width)
@



\section{Quality Assessment}
\subsection{Spot saturation}
In this section, we look at the number of saturated spots across samples and peptides. A spot is saturated if it has a foreground intensity equal to 65535 ($2^{16}$-1). 65535 is the maximum value that can be recorded in a 16 bit image. So if a spot has an intensity equal to 65535, all pixels within the spot are saturated and the resulting estimated peptide intensity is right censored. 
Figure \ref{fig:SaturationHXB2} shows the percentage of saturated peptides vs. HXB2 positions group by visit (Pre/Post). Table \ref{tab:SatPeptides} gives the list of saturated peptides with their proportions of saturation while Table \ref{tab:SatSamples} gives the list of samples with at least 1\% of saturated peptide.

<<Frequency-of-saturation,dependson=DataDB>>=
psSetRaw.clade<-split(psSetRaw,clade(psSetRaw))
# I break it down by control group
ind<-grepl("[Pp][Rr][Ee]",pData(psSetRaw)$visit)
freq.sat.clade.cont<-lapply(psSetRaw.clade,function(x,ind){x<-x[,ind];apply(exprs(x),1,function(x)mean(x==16))}*100,ind)
freq.sat.clade<-lapply(psSetRaw.clade,function(x,ind){x<-x[,ind];apply(exprs(x),1,function(x)mean(x==16))}*100,!ind)
@

<<Plotting-tracks>>=
HIV_db<-loadFeatures()
envBase<-getFeature(HIV_db,name=c("env"))##get feature by name
envStart<-start(envBase)
envEnd<-end(envBase)

#make a track for AA seqence
AA_anno<-makePepAxis(envBase,addNC=TRUE,littleTicks=T,dp = DisplayPars(cex=.7))

proteins<-getFeature(HIV_db,category="protein",start=envStart,end=envEnd,frame=getFrame(envBase))
pro_anno<-makeGenericAnno(proteins,envStart,dp=DisplayPars(color=colorAnno[1],fill=colorAnno[1], alpha=.5, idRotation=0, idCex=.85, showID = TRUE, size=sizeAnno, lwd=2))

landmarks<-getFeature(HIV_db,name=c("V1","V2","V3","V4","V5","ID","MPER"))
landmarks_anno<-makeGenericAnno(landmarks,envStart,dp=DisplayPars(color=colorAnno[2],fill=colorAnno[2], alpha=.5, idRotation=0, idCex=.65, showID = TRUE, size=sizeAnno, lwd=2))
anno.list<-list(HXB2=AA_anno,Proteins=pro_anno,Landmarks=landmarks_anno)
@

\begin{figure}
<<SaturationHXb2, fig.keep=high, cache=FALSE>>=
data.list<-sapply(1:7,function(i,x,y){m<-cbind(x[[i]],y[[i]]);colnames(m)<-c("Pre","Post");m},freq.sat.clade.cont,freq.sat.clade)

pepStat:::.plot.clade(psSetRaw.clade,data.list,anno.list,minimalist=TRUE,colorTrack,colorAnno,sizeTrack,sizeAnno,hotspots)
@
\caption{Percentage of saturated spots by visit (Pre/Post) as a function of HXB2.}
\label{fig:SaturationHXB2}
\end{figure}

<<Frequency-of-saturation-per-peptide, dependson=DataDB>>=
ind<-grepl("[Pp][Rr][Ee]",pData(psSetRaw)$visit)
freq.sat.cont<-rowMeans(exprs(psSetRaw)[,ind,drop=FALSE]==16)*100
freq.sat<-rowMeans(exprs(psSetRaw)[,!ind,drop=FALSE]==16)*100
table<-data.frame(peptide(psSetRaw),freq.sat.cont,freq.sat,position(psSetRaw),ranges(psSetRaw)$annotation)[freq.sat>5,]
# table<-table[order(freq.sat,decreasing=TRUE),]
table<-table[1:min(nrow(table),20),]
names(table)<-c("Peptide",paste("% Sat."," (Pre)",sep=""),paste("% Sat."," (Post)",sep=""),"HXB2 pos.","Annotation")
rownames(table)<-NULL
@


<<Table-of-saturation-by-peptides, results=tex, echo=FALSE, cache=FALSE>>=
print(xtable(table,digits=c(0,0,1,1,0,0),caption="Percentage of saturated spots across samples by peptide and visit group, only peptides with 5 percent saturation are shown.",label="tab:SatPeptides"))
@

<<Frequency-of-saturation-per-sample, dependson=DataDB>>=
freq.sat<-rowMeans(t(exprs(psSetRaw))==16)*100
table<-data.frame(sampleNames(psSetRaw),freq.sat)[freq.sat>1,]
if(nrow(table)==0)
  {
  table[1,]<-c(NA,NA)
  }
# table<-table[order(-table[,2]),]
names(table)<-c("Sample","% Sat.")
rownames(table)<-NULL
@

<<Table-of-saturation-by-samples, results=tex, cache=FALSE>>=
print(xtable(table,digits=c(0,0,2),caption="Percentage of saturated peptides across samples, only sample with 1 percent saturation across all peptides are shown.",label="tab:SatSamples"))
@

\subsection{Intensity distribution before and after normalization}
Figure \ref{fig:boxplotunnormalized} shows boxplots of raw intensities accross ptids and visit groups.
Figure \ref{fig:boxplotnormalized} shows boxplots of normalized intensities accross ptids and visit groups.

\begin{figure}
<<BoxplotUnnormalized, fig.keep=high, dependson=DataDB>>=
y.long.raw<-pepStat:::.reshape.pSet(psSetRaw)
# ## If more than 16, just look at 16
palette<-brewer.pal(7,"Set3")
## If more than 20, just look at 16
par <- trellis.par.get("box.dot")
par$pch <- 19
par$cex <- .3
par$alpha <- .2
trellis.par.set("box.dot", par)
par <- trellis.par.get("box.rectangle")
par$lwd<-1.5
trellis.par.set("box.rectangle", par)
par <- trellis.par.get("plot.symbol")
par$pch <- 19
par$cex <- .3
par$alpha <- .2
trellis.par.set("plot.symbol", par)
par <- trellis.par.get("strip.background")
par$col <- brewer.pal(7,"Greys")
par$alpha=.9
trellis.par.set("strip.background", par)
u.ptid<-unique(y.long.raw$ptid)
bwplot(Intensity ~ ptid, groups=visit, panel = panel.superpose, panel.groups=panel.bwplot, alpha=.5, cex=.3, fill=palette, pch="|", data=y.long.raw[y.long.raw$ptid%in%u.ptid[1:min(49,length(u.ptid))],],scales=list(x=list(rot=45)))
@
\caption{\label{fig:boxplotunnormalized}Boxplots of un-normalized intensities accross ptids and visit groups. Only the first 16 ptids are shown for clarity.}
\end{figure}


\begin{figure}
<<BoxplotNormalized, fig.keep=high, dependson=DataDB>>=
y.long<-pepStat:::.reshape.pSet(pnSet)
palette<-brewer.pal(7,"Set3")
par <- trellis.par.get("box.dot")
par$pch <- 19
par$cex <- .3
par$alpha <- .2
trellis.par.set("box.dot", par)
par <- trellis.par.get("box.rectangle")
par$lwd<-1.5
trellis.par.set("box.rectangle", par)
par <- trellis.par.get("plot.symbol")
par$pch <- 19
par$cex <- .3
par$alpha <- .2
trellis.par.set("plot.symbol", par)
par <- trellis.par.get("strip.background")
par$col <- brewer.pal(7,"Greys")
par$alpha=.9
trellis.par.set("strip.background", par)

bwplot(Intensity ~ ptid, groups=visit, panel = panel.superpose, panel.groups=panel.bwplot, alpha=.5, cex=.3, fill=palette, pch="|", data=y.long[y.long$ptid%in%u.ptid[1:min(49,length(u.ptid))],],scales=list(x=list(rot=45)))
@
\caption{\label{fig:boxplotnormalized}Boxplots of normalized intensities accross ptids and visit groups. Only the first 16 ptids are shown for clarity.}
\end{figure}

\section{Statistical analysis}
\subsection{Agreggate response across subtypes}
The aggregate response accross all 7 subtypes is given by Figure \ref{fig:ResponseHXB2}.


\begin{figure}
<<ResponseHXB2, fig.show=animate, cache=FALSE>>=
# I remove the flu/RSV control
ym<-pepStat:::.bgCorrect.pSet(pnSet,verbose=FALSE)
ym.smooth<-pepStat:::.bgCorrect.pSet(pnmSet,verbose=FALSE)

for(i in 1:ncol(ym))
  {
y<-ym[,i,drop=F]
y.smooth<-ym.smooth[,i]
position<-position(pnSet)

hotspots<-getEpitope(HIV_db,name=colnames(y))
if(!is.null(hotspots))
  {
    start(hotspots)<-(start(hotspots)-envStart)/3
    end(hotspots)<-(end(hotspots)-envStart)/3
  }
pepStat:::.plot.intensity(y,y.smooth,position,anno.list,colorTrack,colorAnno,sizeTrack,sizeAnno,hotspots)
}
@
\caption{Normalized and smoothed intensities vs. peptide HXB2 positions aggregated over all sub-types. All intensities are background corrected by subtracting the intensities from the anti-IgG (only) sample. Known epitope regions (when available) are highlighted in light yellow.}
\label{fig:ResponseHXB2}
\end{figure}


\subsection{Subtype specific responses}
The subtype specific responses accross all 7 subtypes are displayed in Figure \ref{fig:SubtypeResponseHXB2}.

<<Subtype-specific-response-rate, dependson=DataDB>>=
pnSet.clade<-split(pnSet,clade(pnSet))
# I break it down by control group
pnmSet.clade<-lapply(pnSet.clade,slidingMean,width=width)
@


\begin{figure}
<<ResponseSubtypeHXB2,  fig.show=animate, cache=FALSE>>=
ym.clade<-lapply(pnSet.clade,pepStat:::.bgCorrect.pSet)
ym.smooth.clade<-lapply(pnmSet.clade,pepStat:::.bgCorrect.pSet)

for(i in 1:ncol(ym.clade[[1]]))
  {
y.clade<-lapply(ym.clade,"[",,i,drop=F)
y.smooth.clade<-lapply(ym.smooth.clade,"[",,i,drop=T)

position.clade<-lapply(pnSet.clade,position)

hotspots<-getEpitope(HIV_db,name=colnames(y))
if(!is.null(hotspots))
  {
    start(hotspots)<-(start(hotspots)-envStart)/3
    end(hotspots)<-(end(hotspots)-envStart)/3
  }
pepStat:::.plot.intensity(y.clade,y.smooth.clade,position.clade,anno.list,colorTrack,colorAnno,sizeTrack,sizeAnno,hotspots)
}
@
\caption{Normalized and smoothed intensities vs. peptide HXB2 positions grouped by sub-types. All intensities are background corrected by subtracting the intensities from the anti-IgG (only) sample. Known epitope regions (when available) are highlighted in light yellow.}
\label{fig:SubtypeResponseHXB2}
\end{figure}



\section{R and package version}
You are using the following version of R and packages:
<<Rsession,echo=TRUE,cache=FALSE>>=
sessionInfo()
@
\noindent with the following data:
<<Data-used,cache=FALSE,echo=TRUE>>=
path
head(pData(psSet))
@
\noindent and the following analysis options:
<<General-options,cache=FALSE,echo=TRUE>>=
width
call.cutoff
hotspot.cutoff
levels(pData(psSet)$treatment)
@
